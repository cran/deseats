// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// BV41filterCpp
Rcpp::List BV41filterCpp(const arma::vec& xt, const arma::mat& wst, const arma::mat& wss, const int nrowst, const int nrowss, const int maxt, const int maxs);
RcppExport SEXP _deseats_BV41filterCpp(SEXP xtSEXP, SEXP wstSEXP, SEXP wssSEXP, SEXP nrowstSEXP, SEXP nrowssSEXP, SEXP maxtSEXP, SEXP maxsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type xt(xtSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type wst(wstSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type wss(wssSEXP);
    Rcpp::traits::input_parameter< const int >::type nrowst(nrowstSEXP);
    Rcpp::traits::input_parameter< const int >::type nrowss(nrowssSEXP);
    Rcpp::traits::input_parameter< const int >::type maxt(maxtSEXP);
    Rcpp::traits::input_parameter< const int >::type maxs(maxsSEXP);
    rcpp_result_gen = Rcpp::wrap(BV41filterCpp(xt, wst, wss, nrowst, nrowss, maxt, maxs));
    return rcpp_result_gen;
END_RCPP
}
// ARinftySHORT
arma::vec ARinftySHORT(const arma::vec& ar, const arma::rowvec& ma, const int max_i);
RcppExport SEXP _deseats_ARinftySHORT(SEXP arSEXP, SEXP maSEXP, SEXP max_iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type ar(arSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type ma(maSEXP);
    Rcpp::traits::input_parameter< const int >::type max_i(max_iSEXP);
    rcpp_result_gen = Rcpp::wrap(ARinftySHORT(ar, ma, max_i));
    return rcpp_result_gen;
END_RCPP
}
// MAinftySHORT
arma::vec MAinftySHORT(const arma::rowvec& ar, const arma::vec& ma, const int max_i);
RcppExport SEXP _deseats_MAinftySHORT(SEXP arSEXP, SEXP maSEXP, SEXP max_iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::rowvec& >::type ar(arSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ma(maSEXP);
    Rcpp::traits::input_parameter< const int >::type max_i(max_iSEXP);
    rcpp_result_gen = Rcpp::wrap(MAinftySHORT(ar, ma, max_i));
    return rcpp_result_gen;
END_RCPP
}
// ARinftyLONG
arma::vec ARinftyLONG(arma::rowvec& ar, const arma::vec& d_coef);
RcppExport SEXP _deseats_ARinftyLONG(SEXP arSEXP, SEXP d_coefSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::rowvec& >::type ar(arSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type d_coef(d_coefSEXP);
    rcpp_result_gen = Rcpp::wrap(ARinftyLONG(ar, d_coef));
    return rcpp_result_gen;
END_RCPP
}
// MAinftyLONG
arma::rowvec MAinftyLONG(arma::vec& ma, const arma::vec& d_coef);
RcppExport SEXP _deseats_MAinftyLONG(SEXP maSEXP, SEXP d_coefSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type ma(maSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type d_coef(d_coefSEXP);
    rcpp_result_gen = Rcpp::wrap(MAinftyLONG(ma, d_coef));
    return rcpp_result_gen;
END_RCPP
}
// fcastCpp
arma::vec fcastCpp(const arma::vec& X, const arma::vec& innov, const arma::rowvec& ar, const arma::rowvec& ma, const int h);
RcppExport SEXP _deseats_fcastCpp(SEXP XSEXP, SEXP innovSEXP, SEXP arSEXP, SEXP maSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type innov(innovSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type ar(arSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type ma(maSEXP);
    Rcpp::traits::input_parameter< const int >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(fcastCpp(X, innov, ar, ma, h));
    return rcpp_result_gen;
END_RCPP
}
// tfcastCpp
arma::vec tfcastCpp(const arma::vec& X, const arma::vec& innov, const arma::vec& epsBoot, const arma::rowvec& ar, const arma::rowvec& ma, const int h);
RcppExport SEXP _deseats_tfcastCpp(SEXP XSEXP, SEXP innovSEXP, SEXP epsBootSEXP, SEXP arSEXP, SEXP maSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type innov(innovSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type epsBoot(epsBootSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type ar(arSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type ma(maSEXP);
    Rcpp::traits::input_parameter< const int >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(tfcastCpp(X, innov, epsBoot, ar, ma, h));
    return rcpp_result_gen;
END_RCPP
}
// seqCpp
arma::vec seqCpp(const int from, const int to);
RcppExport SEXP _deseats_seqCpp(SEXP fromSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const int >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(seqCpp(from, to));
    return rcpp_result_gen;
END_RCPP
}
// rseqCpp
arma::rowvec rseqCpp(const int from, const int to);
RcppExport SEXP _deseats_rseqCpp(SEXP fromSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const int >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(rseqCpp(from, to));
    return rcpp_result_gen;
END_RCPP
}
// factorialCpp
int factorialCpp(const int k);
RcppExport SEXP _deseats_factorialCpp(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(factorialCpp(k));
    return rcpp_result_gen;
END_RCPP
}
// armaCpp
Rcpp::List armaCpp(const arma::vec& Xt, const int p, const int q);
RcppExport SEXP _deseats_armaCpp(SEXP XtSEXP, SEXP pSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type Xt(XtSEXP);
    Rcpp::traits::input_parameter< const int >::type p(pSEXP);
    Rcpp::traits::input_parameter< const int >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(armaCpp(Xt, p, q));
    return rcpp_result_gen;
END_RCPP
}
// BICarmaCpp
double BICarmaCpp(const arma::vec& Xt, const int p, const int q);
RcppExport SEXP _deseats_BICarmaCpp(SEXP XtSEXP, SEXP pSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type Xt(XtSEXP);
    Rcpp::traits::input_parameter< const int >::type p(pSEXP);
    Rcpp::traits::input_parameter< const int >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(BICarmaCpp(Xt, p, q));
    return rcpp_result_gen;
END_RCPP
}
// selectOrderBIC
Rcpp::NumericVector selectOrderBIC(const arma::vec& Xt, const int pmax, const int qmax);
RcppExport SEXP _deseats_selectOrderBIC(SEXP XtSEXP, SEXP pmaxSEXP, SEXP qmaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type Xt(XtSEXP);
    Rcpp::traits::input_parameter< const int >::type pmax(pmaxSEXP);
    Rcpp::traits::input_parameter< const int >::type qmax(qmaxSEXP);
    rcpp_result_gen = Rcpp::wrap(selectOrderBIC(Xt, pmax, qmax));
    return rcpp_result_gen;
END_RCPP
}
// armaoptCpp
Rcpp::List armaoptCpp(const arma::vec& Xt);
RcppExport SEXP _deseats_armaoptCpp(SEXP XtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type Xt(XtSEXP);
    rcpp_result_gen = Rcpp::wrap(armaoptCpp(Xt));
    return rcpp_result_gen;
END_RCPP
}
// arma_sumacovCpp
double arma_sumacovCpp(Rcpp::List arma);
RcppExport SEXP _deseats_arma_sumacovCpp(SEXP armaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type arma(armaSEXP);
    rcpp_result_gen = Rcpp::wrap(arma_sumacovCpp(arma));
    return rcpp_result_gen;
END_RCPP
}
// acovCpp
arma::vec acovCpp(const arma::vec& Xt, const int lagMax);
RcppExport SEXP _deseats_acovCpp(SEXP XtSEXP, SEXP lagMaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type Xt(XtSEXP);
    Rcpp::traits::input_parameter< const int >::type lagMax(lagMaxSEXP);
    rcpp_result_gen = Rcpp::wrap(acovCpp(Xt, lagMax));
    return rcpp_result_gen;
END_RCPP
}
// cf0Cpp
double cf0Cpp(const arma::vec& Xt);
RcppExport SEXP _deseats_cf0Cpp(SEXP XtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type Xt(XtSEXP);
    rcpp_result_gen = Rcpp::wrap(cf0Cpp(Xt));
    return rcpp_result_gen;
END_RCPP
}
// fitteddeseatsCpp
Rcpp::List fitteddeseatsCpp(const arma::vec& y, const int p, const int s, const int mu, const double b, const int bb);
RcppExport SEXP _deseats_fitteddeseatsCpp(SEXP ySEXP, SEXP pSEXP, SEXP sSEXP, SEXP muSEXP, SEXP bSEXP, SEXP bbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const int >::type p(pSEXP);
    Rcpp::traits::input_parameter< const int >::type s(sSEXP);
    Rcpp::traits::input_parameter< const int >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type b(bSEXP);
    Rcpp::traits::input_parameter< const int >::type bb(bbSEXP);
    rcpp_result_gen = Rcpp::wrap(fitteddeseatsCpp(y, p, s, mu, b, bb));
    return rcpp_result_gen;
END_RCPP
}
// residdeseatsCpp
arma::vec residdeseatsCpp(const arma::vec& y, const int p, const int s, const int mu, const double b, const int bb);
RcppExport SEXP _deseats_residdeseatsCpp(SEXP ySEXP, SEXP pSEXP, SEXP sSEXP, SEXP muSEXP, SEXP bSEXP, SEXP bbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const int >::type p(pSEXP);
    Rcpp::traits::input_parameter< const int >::type s(sSEXP);
    Rcpp::traits::input_parameter< const int >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type b(bSEXP);
    Rcpp::traits::input_parameter< const int >::type bb(bbSEXP);
    rcpp_result_gen = Rcpp::wrap(residdeseatsCpp(y, p, s, mu, b, bb));
    return rcpp_result_gen;
END_RCPP
}
// derivdeseatsCpp
arma::vec derivdeseatsCpp(const arma::vec& y, const int p, const int s, const int mu, const double b, const int bb, const int v);
RcppExport SEXP _deseats_derivdeseatsCpp(SEXP ySEXP, SEXP pSEXP, SEXP sSEXP, SEXP muSEXP, SEXP bSEXP, SEXP bbSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const int >::type p(pSEXP);
    Rcpp::traits::input_parameter< const int >::type s(sSEXP);
    Rcpp::traits::input_parameter< const int >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type b(bSEXP);
    Rcpp::traits::input_parameter< const int >::type bb(bbSEXP);
    Rcpp::traits::input_parameter< const int >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(derivdeseatsCpp(y, p, s, mu, b, bb, v));
    return rcpp_result_gen;
END_RCPP
}
// algorithmCpp
Rcpp::List algorithmCpp(const arma::vec& yt, const int p, const int s, const int mu, const double bStart, const int CF, const int errors, const double cb, const int bb, const int errm, const double expo);
RcppExport SEXP _deseats_algorithmCpp(SEXP ytSEXP, SEXP pSEXP, SEXP sSEXP, SEXP muSEXP, SEXP bStartSEXP, SEXP CFSEXP, SEXP errorsSEXP, SEXP cbSEXP, SEXP bbSEXP, SEXP errmSEXP, SEXP expoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type yt(ytSEXP);
    Rcpp::traits::input_parameter< const int >::type p(pSEXP);
    Rcpp::traits::input_parameter< const int >::type s(sSEXP);
    Rcpp::traits::input_parameter< const int >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type bStart(bStartSEXP);
    Rcpp::traits::input_parameter< const int >::type CF(CFSEXP);
    Rcpp::traits::input_parameter< const int >::type errors(errorsSEXP);
    Rcpp::traits::input_parameter< const double >::type cb(cbSEXP);
    Rcpp::traits::input_parameter< const int >::type bb(bbSEXP);
    Rcpp::traits::input_parameter< const int >::type errm(errmSEXP);
    Rcpp::traits::input_parameter< const double >::type expo(expoSEXP);
    rcpp_result_gen = Rcpp::wrap(algorithmCpp(yt, p, s, mu, bStart, CF, errors, cb, bb, errm, expo));
    return rcpp_result_gen;
END_RCPP
}
// wls_Cpp
arma::vec wls_Cpp(const arma::vec& x, const arma::vec& y, const arma::vec& wk);
RcppExport SEXP _deseats_wls_Cpp(SEXP xSEXP, SEXP ySEXP, SEXP wkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type wk(wkSEXP);
    rcpp_result_gen = Rcpp::wrap(wls_Cpp(x, y, wk));
    return rcpp_result_gen;
END_RCPP
}
// find_sub_Cpp
arma::uvec find_sub_Cpp(const arma::vec& t, const double t0, const double interior_bwidth, const int seasonality);
RcppExport SEXP _deseats_find_sub_Cpp(SEXP tSEXP, SEXP t0SEXP, SEXP interior_bwidthSEXP, SEXP seasonalitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const double >::type t0(t0SEXP);
    Rcpp::traits::input_parameter< const double >::type interior_bwidth(interior_bwidthSEXP);
    Rcpp::traits::input_parameter< const int >::type seasonality(seasonalitySEXP);
    rcpp_result_gen = Rcpp::wrap(find_sub_Cpp(t, t0, interior_bwidth, seasonality));
    return rcpp_result_gen;
END_RCPP
}
// llin_calc_Cpp
arma::vec llin_calc_Cpp(const arma::vec& yt, const arma::vec& t, const double bwidth, const int P, const int mu, const int bb, const int seasonality);
RcppExport SEXP _deseats_llin_calc_Cpp(SEXP ytSEXP, SEXP tSEXP, SEXP bwidthSEXP, SEXP PSEXP, SEXP muSEXP, SEXP bbSEXP, SEXP seasonalitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type yt(ytSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const double >::type bwidth(bwidthSEXP);
    Rcpp::traits::input_parameter< const int >::type P(PSEXP);
    Rcpp::traits::input_parameter< const int >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const int >::type bb(bbSEXP);
    Rcpp::traits::input_parameter< const int >::type seasonality(seasonalitySEXP);
    rcpp_result_gen = Rcpp::wrap(llin_calc_Cpp(yt, t, bwidth, P, mu, bb, seasonality));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_deseats_BV41filterCpp", (DL_FUNC) &_deseats_BV41filterCpp, 7},
    {"_deseats_ARinftySHORT", (DL_FUNC) &_deseats_ARinftySHORT, 3},
    {"_deseats_MAinftySHORT", (DL_FUNC) &_deseats_MAinftySHORT, 3},
    {"_deseats_ARinftyLONG", (DL_FUNC) &_deseats_ARinftyLONG, 2},
    {"_deseats_MAinftyLONG", (DL_FUNC) &_deseats_MAinftyLONG, 2},
    {"_deseats_fcastCpp", (DL_FUNC) &_deseats_fcastCpp, 5},
    {"_deseats_tfcastCpp", (DL_FUNC) &_deseats_tfcastCpp, 6},
    {"_deseats_seqCpp", (DL_FUNC) &_deseats_seqCpp, 2},
    {"_deseats_rseqCpp", (DL_FUNC) &_deseats_rseqCpp, 2},
    {"_deseats_factorialCpp", (DL_FUNC) &_deseats_factorialCpp, 1},
    {"_deseats_armaCpp", (DL_FUNC) &_deseats_armaCpp, 3},
    {"_deseats_BICarmaCpp", (DL_FUNC) &_deseats_BICarmaCpp, 3},
    {"_deseats_selectOrderBIC", (DL_FUNC) &_deseats_selectOrderBIC, 3},
    {"_deseats_armaoptCpp", (DL_FUNC) &_deseats_armaoptCpp, 1},
    {"_deseats_arma_sumacovCpp", (DL_FUNC) &_deseats_arma_sumacovCpp, 1},
    {"_deseats_acovCpp", (DL_FUNC) &_deseats_acovCpp, 2},
    {"_deseats_cf0Cpp", (DL_FUNC) &_deseats_cf0Cpp, 1},
    {"_deseats_fitteddeseatsCpp", (DL_FUNC) &_deseats_fitteddeseatsCpp, 6},
    {"_deseats_residdeseatsCpp", (DL_FUNC) &_deseats_residdeseatsCpp, 6},
    {"_deseats_derivdeseatsCpp", (DL_FUNC) &_deseats_derivdeseatsCpp, 7},
    {"_deseats_algorithmCpp", (DL_FUNC) &_deseats_algorithmCpp, 11},
    {"_deseats_wls_Cpp", (DL_FUNC) &_deseats_wls_Cpp, 3},
    {"_deseats_find_sub_Cpp", (DL_FUNC) &_deseats_find_sub_Cpp, 4},
    {"_deseats_llin_calc_Cpp", (DL_FUNC) &_deseats_llin_calc_Cpp, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_deseats(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
